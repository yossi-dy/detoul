#!/bin/bash

_detoul() {
  local line="${COMP_LINE}"
  
  if (echo "$line" | grep -q "^[[:graph:]]\+\s\+edit\+\s\+[[:graph:]]\+\s"); then
    _script_commands=$(detoul options "$(echo "$line" | sed -E 's/^[[:graph:]]+\s+([[:graph:]]+).*/\1/')")
  elif (echo "$line" | grep -q "^[[:graph:]]\+\s\+[[:graph:]]\+\s\+[[:graph:]]\+\s\+[[:graph:]]\+\s"); then
    _script_commands=$(detoul options "$(echo "$line" | sed -E 's/^[[:graph:]]+\s+([[:graph:]]+).*/\1/')")
  elif (echo "$line" | grep -q "^[[:graph:]]\+\s\+[[:graph:]]\+\s\+[[:graph:]]\+\s"); then
    _script_commands=$((git tag; git branch -a | grep -v "\->" | sed -E 's/remotes\/[[:alnum:]]+\///g' | cut -c3- | sort | uniq | grep -v "^detoul-spec$") | xargs)
  elif [ "$(echo "$line" | wc -w)" == "1" ]; then
    _script_commands=$(detoul commands)
  elif ([ "$(echo "$line" | wc -w)" == "2" ] && ! (echo "$line" | grep -q "\s$")); then
    _script_commands=$(detoul commands)
  elif (echo "$line" | grep -q "^[[:graph:]]\+\s\+cat\+\s\+"); then
    _script_commands=$(git ls-tree detoul-spec -r --full-tree 2>/dev/null | cut -f2 | grep -v "^\.[gr]" | sed -e 's/^\.archive\///g')
  elif (echo "$line" | grep -q "^[[:graph:]]\+\s\+unarchive\+\s\+"); then
    _script_commands=$(git ls-tree detoul-spec -r --full-tree 2>/dev/null | cut -f2 | grep "^\.archive/" | sed -e 's/^\.archive\///g')
  else
    _script_commands=$(git ls-tree detoul-spec --full-tree 2>/dev/null | cut -f2 | grep -v "^\.")
  fi
  local cur prev
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -W "${_script_commands}" -- ${cur}) )
  
  return 0
}

complete -F _detoul detoul
